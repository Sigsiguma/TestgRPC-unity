// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: test.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace User {
    public static partial class UserService {
        static readonly string __ServiceName = "UserService";

        static readonly grpc::Marshaller<global::UserRequest> __Marshaller_UserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UserRequest.Parser.ParseFrom);
        static readonly grpc::Marshaller<global::UserResponse> __Marshaller_UserResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UserResponse.Parser.ParseFrom);

        static readonly grpc::Method<global::UserRequest, global::UserResponse> __Method_GetUser = new grpc::Method<global::UserRequest, global::UserResponse>(
            grpc::MethodType.Unary,
            __ServiceName,
            "GetUser",
            __Marshaller_UserRequest,
            __Marshaller_UserResponse);

        /// <summary>Service descriptor</summary>
        public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor {
            get { return global::TestReflection.Descriptor.Services[0]; }
        }

        /// <summary>Base class for server-side implementations of UserService</summary>
        public abstract partial class UserServiceBase {
            public virtual global::System.Threading.Tasks.Task<global::UserResponse> GetUser(global::UserRequest request, grpc::ServerCallContext context) {
                throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
            }

        }

        /// <summary>Client for UserService</summary>
        public partial class UserServiceClient : grpc::ClientBase<UserServiceClient> {
            /// <summary>Creates a new client for UserService</summary>
            /// <param name="channel">The channel to use to make remote calls.</param>
            public UserServiceClient(grpc::Channel channel) : base(channel) {
            }
            /// <summary>Creates a new client for UserService that uses a custom <c>CallInvoker</c>.</summary>
            /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
            public UserServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker) {
            }
            /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
            protected UserServiceClient() : base() {
            }
            /// <summary>Protected constructor to allow creation of configured clients.</summary>
            /// <param name="configuration">The client configuration.</param>
            protected UserServiceClient(ClientBaseConfiguration configuration) : base(configuration) {
            }

            public virtual global::UserResponse GetUser(global::UserRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken)) {
                return GetUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            public virtual global::UserResponse GetUser(global::UserRequest request, grpc::CallOptions options) {
                return CallInvoker.BlockingUnaryCall(__Method_GetUser, null, options, request);
            }
            public virtual grpc::AsyncUnaryCall<global::UserResponse> GetUserAsync(global::UserRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken)) {
                return GetUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            public virtual grpc::AsyncUnaryCall<global::UserResponse> GetUserAsync(global::UserRequest request, grpc::CallOptions options) {
                return CallInvoker.AsyncUnaryCall(__Method_GetUser, null, options, request);
            }
            /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
            protected override UserServiceClient NewInstance(ClientBaseConfiguration configuration) {
                return new UserServiceClient(configuration);
            }
        }

        /// <summary>Creates service definition that can be registered with a server</summary>
        /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        public static grpc::ServerServiceDefinition BindService(UserServiceBase serviceImpl) {
            return grpc::ServerServiceDefinition.CreateBuilder()
                .AddMethod(__Method_GetUser, serviceImpl.GetUser).Build();
        }

    }
}
#endregion
