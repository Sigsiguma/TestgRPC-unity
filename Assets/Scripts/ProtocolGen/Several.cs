// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: several.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Several {

  /// <summary>Holder for reflection information generated from several.proto</summary>
  public static partial class SeveralReflection {

    #region Descriptor
    /// <summary>File descriptor for several.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SeveralReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1zZXZlcmFsLnByb3RvEgdzZXZlcmFsIrYBCg5TZXZlcmFsUmVxdWVzdBIK",
            "CgJpZBgBIAEoCRIOCgZudW1iZXIYAiABKAUSDAoEbGlzdBgDIAMoBRIRCglw",
            "cmVjaXNpb24YBCABKAISDAoEZmxhZxgFIAEoCBItCgNkaWMYBiADKAsyIC5z",
            "ZXZlcmFsLlNldmVyYWxSZXF1ZXN0LkRpY0VudHJ5GioKCERpY0VudHJ5EgsK",
            "A2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoCToCOAEiQQoPU2V2ZXJhbFJlc3Bv",
            "bnNlEhEKCWlzU3VjY2VzcxgBIAEoCBINCgVuYW1lcxgCIAMoCRIMCgRvbGRz",
            "GAMgAygEMqEBCg5TZXZlcmFsU2VydmljZRJFCg5HZXRTZXZlcmFsRGF0YRIX",
            "LnNldmVyYWwuU2V2ZXJhbFJlcXVlc3QaGC5zZXZlcmFsLlNldmVyYWxSZXNw",
            "b25zZSIAEkgKEVVwZGF0ZVNldmVyYWxEYXRhEhcuc2V2ZXJhbC5TZXZlcmFs",
            "UmVxdWVzdBoYLnNldmVyYWwuU2V2ZXJhbFJlc3BvbnNlIgBCMQoYY29tLmFw",
            "cGxpYm90Lmdlbi5zZXZlcmFsQhNTZXZlcmFsU2VydmljZVByb3RvUAFiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Several.SeveralRequest), global::Several.SeveralRequest.Parser, new[]{ "Id", "Number", "List", "Precision", "Flag", "Dic" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Several.SeveralResponse), global::Several.SeveralResponse.Parser, new[]{ "IsSuccess", "Names", "Olds" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SeveralRequest : pb::IMessage<SeveralRequest> {
    private static readonly pb::MessageParser<SeveralRequest> _parser = new pb::MessageParser<SeveralRequest>(() => new SeveralRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SeveralRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Several.SeveralReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeveralRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeveralRequest(SeveralRequest other) : this() {
      id_ = other.id_;
      number_ = other.number_;
      list_ = other.list_.Clone();
      precision_ = other.precision_;
      flag_ = other.flag_;
      dic_ = other.dic_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeveralRequest Clone() {
      return new SeveralRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 2;
    private int number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_list_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> list_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> List {
      get { return list_; }
    }

    /// <summary>Field number for the "precision" field.</summary>
    public const int PrecisionFieldNumber = 4;
    private float precision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Precision {
      get { return precision_; }
      set {
        precision_ = value;
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 5;
    private bool flag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    /// <summary>Field number for the "dic" field.</summary>
    public const int DicFieldNumber = 6;
    private static readonly pbc::MapField<int, string>.Codec _map_dic_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<int, string> dic_ = new pbc::MapField<int, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> Dic {
      get { return dic_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SeveralRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SeveralRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Number != other.Number) return false;
      if(!list_.Equals(other.list_)) return false;
      if (Precision != other.Precision) return false;
      if (Flag != other.Flag) return false;
      if (!Dic.Equals(other.Dic)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Number != 0) hash ^= Number.GetHashCode();
      hash ^= list_.GetHashCode();
      if (Precision != 0F) hash ^= Precision.GetHashCode();
      if (Flag != false) hash ^= Flag.GetHashCode();
      hash ^= Dic.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Number != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Number);
      }
      list_.WriteTo(output, _repeated_list_codec);
      if (Precision != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Precision);
      }
      if (Flag != false) {
        output.WriteRawTag(40);
        output.WriteBool(Flag);
      }
      dic_.WriteTo(output, _map_dic_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      if (Precision != 0F) {
        size += 1 + 4;
      }
      if (Flag != false) {
        size += 1 + 1;
      }
      size += dic_.CalculateSize(_map_dic_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SeveralRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      list_.Add(other.list_);
      if (other.Precision != 0F) {
        Precision = other.Precision;
      }
      if (other.Flag != false) {
        Flag = other.Flag;
      }
      dic_.Add(other.dic_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Number = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
          case 37: {
            Precision = input.ReadFloat();
            break;
          }
          case 40: {
            Flag = input.ReadBool();
            break;
          }
          case 50: {
            dic_.AddEntriesFrom(input, _map_dic_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SeveralResponse : pb::IMessage<SeveralResponse> {
    private static readonly pb::MessageParser<SeveralResponse> _parser = new pb::MessageParser<SeveralResponse>(() => new SeveralResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SeveralResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Several.SeveralReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeveralResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeveralResponse(SeveralResponse other) : this() {
      isSuccess_ = other.isSuccess_;
      names_ = other.names_.Clone();
      olds_ = other.olds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeveralResponse Clone() {
      return new SeveralResponse(this);
    }

    /// <summary>Field number for the "isSuccess" field.</summary>
    public const int IsSuccessFieldNumber = 1;
    private bool isSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSuccess {
      get { return isSuccess_; }
      set {
        isSuccess_ = value;
      }
    }

    /// <summary>Field number for the "names" field.</summary>
    public const int NamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_names_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> names_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Names {
      get { return names_; }
    }

    /// <summary>Field number for the "olds" field.</summary>
    public const int OldsFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_olds_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> olds_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Olds {
      get { return olds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SeveralResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SeveralResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsSuccess != other.IsSuccess) return false;
      if(!names_.Equals(other.names_)) return false;
      if(!olds_.Equals(other.olds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsSuccess != false) hash ^= IsSuccess.GetHashCode();
      hash ^= names_.GetHashCode();
      hash ^= olds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSuccess != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsSuccess);
      }
      names_.WriteTo(output, _repeated_names_codec);
      olds_.WriteTo(output, _repeated_olds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsSuccess != false) {
        size += 1 + 1;
      }
      size += names_.CalculateSize(_repeated_names_codec);
      size += olds_.CalculateSize(_repeated_olds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SeveralResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsSuccess != false) {
        IsSuccess = other.IsSuccess;
      }
      names_.Add(other.names_);
      olds_.Add(other.olds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsSuccess = input.ReadBool();
            break;
          }
          case 18: {
            names_.AddEntriesFrom(input, _repeated_names_codec);
            break;
          }
          case 26:
          case 24: {
            olds_.AddEntriesFrom(input, _repeated_olds_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
