// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: several.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Several {

  /// <summary>Holder for reflection information generated from several.proto</summary>
  public static partial class SeveralReflection {

    #region Descriptor
    /// <summary>File descriptor for several.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SeveralReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1zZXZlcmFsLnByb3RvEgdzZXZlcmFsIosBCgtTZXZlcmFsRGF0YRIRCglm",
            "bG9hdERhdGEYASABKAISEgoKZG91YmxlRGF0YRgCIAEoARIPCgdpbnREYXRh",
            "GAMgASgFEhAKCGxvbmdEYXRhGAQgASgDEhAKCGJvb2xEYXRhGAUgASgIEhIK",
            "CnN0cmluZ0RhdGEYBiABKAkSDAoEbGlzdBgIIAMoCTJQCg5TZXZlcmFsU2Vy",
            "dmljZRI+Cg5HZXRTZXZlcmFsRGF0YRIULnNldmVyYWwuU2V2ZXJhbERhdGEa",
            "FC5zZXZlcmFsLlNldmVyYWxEYXRhIgBCMQoYY29tLmFwcGxpYm90Lmdlbi5z",
            "ZXZlcmFsQhNTZXZlcmFsU2VydmljZVByb3RvUAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Several.SeveralData), global::Several.SeveralData.Parser, new[]{ "FloatData", "DoubleData", "IntData", "LongData", "BoolData", "StringData", "List" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SeveralData : pb::IMessage<SeveralData> {
    private static readonly pb::MessageParser<SeveralData> _parser = new pb::MessageParser<SeveralData>(() => new SeveralData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SeveralData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Several.SeveralReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeveralData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeveralData(SeveralData other) : this() {
      floatData_ = other.floatData_;
      doubleData_ = other.doubleData_;
      intData_ = other.intData_;
      longData_ = other.longData_;
      boolData_ = other.boolData_;
      stringData_ = other.stringData_;
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeveralData Clone() {
      return new SeveralData(this);
    }

    /// <summary>Field number for the "floatData" field.</summary>
    public const int FloatDataFieldNumber = 1;
    private float floatData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatData {
      get { return floatData_; }
      set {
        floatData_ = value;
      }
    }

    /// <summary>Field number for the "doubleData" field.</summary>
    public const int DoubleDataFieldNumber = 2;
    private double doubleData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleData {
      get { return doubleData_; }
      set {
        doubleData_ = value;
      }
    }

    /// <summary>Field number for the "intData" field.</summary>
    public const int IntDataFieldNumber = 3;
    private int intData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntData {
      get { return intData_; }
      set {
        intData_ = value;
      }
    }

    /// <summary>Field number for the "longData" field.</summary>
    public const int LongDataFieldNumber = 4;
    private long longData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LongData {
      get { return longData_; }
      set {
        longData_ = value;
      }
    }

    /// <summary>Field number for the "boolData" field.</summary>
    public const int BoolDataFieldNumber = 5;
    private bool boolData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolData {
      get { return boolData_; }
      set {
        boolData_ = value;
      }
    }

    /// <summary>Field number for the "stringData" field.</summary>
    public const int StringDataFieldNumber = 6;
    private string stringData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringData {
      get { return stringData_; }
      set {
        stringData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_list_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> list_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SeveralData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SeveralData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FloatData != other.FloatData) return false;
      if (DoubleData != other.DoubleData) return false;
      if (IntData != other.IntData) return false;
      if (LongData != other.LongData) return false;
      if (BoolData != other.BoolData) return false;
      if (StringData != other.StringData) return false;
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FloatData != 0F) hash ^= FloatData.GetHashCode();
      if (DoubleData != 0D) hash ^= DoubleData.GetHashCode();
      if (IntData != 0) hash ^= IntData.GetHashCode();
      if (LongData != 0L) hash ^= LongData.GetHashCode();
      if (BoolData != false) hash ^= BoolData.GetHashCode();
      if (StringData.Length != 0) hash ^= StringData.GetHashCode();
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FloatData != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(FloatData);
      }
      if (DoubleData != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(DoubleData);
      }
      if (IntData != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IntData);
      }
      if (LongData != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LongData);
      }
      if (BoolData != false) {
        output.WriteRawTag(40);
        output.WriteBool(BoolData);
      }
      if (StringData.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(StringData);
      }
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FloatData != 0F) {
        size += 1 + 4;
      }
      if (DoubleData != 0D) {
        size += 1 + 8;
      }
      if (IntData != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntData);
      }
      if (LongData != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LongData);
      }
      if (BoolData != false) {
        size += 1 + 1;
      }
      if (StringData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringData);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SeveralData other) {
      if (other == null) {
        return;
      }
      if (other.FloatData != 0F) {
        FloatData = other.FloatData;
      }
      if (other.DoubleData != 0D) {
        DoubleData = other.DoubleData;
      }
      if (other.IntData != 0) {
        IntData = other.IntData;
      }
      if (other.LongData != 0L) {
        LongData = other.LongData;
      }
      if (other.BoolData != false) {
        BoolData = other.BoolData;
      }
      if (other.StringData.Length != 0) {
        StringData = other.StringData;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            FloatData = input.ReadFloat();
            break;
          }
          case 17: {
            DoubleData = input.ReadDouble();
            break;
          }
          case 24: {
            IntData = input.ReadInt32();
            break;
          }
          case 32: {
            LongData = input.ReadInt64();
            break;
          }
          case 40: {
            BoolData = input.ReadBool();
            break;
          }
          case 50: {
            StringData = input.ReadString();
            break;
          }
          case 66: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
